name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  schedule:
    - cron: '0 12 * * *'
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Windows
            os: windows-latest
            pkg-target: node10-win
          - name: macOS
            os: macos-latest
            pkg-target: node10-mac
    steps:
      - name: Run git context
        id: git
        shell: bash
        run: |
          echo ::set-output name=GIT_REFNAME::${GITHUB_REF#refs/*/}
          echo ::set-output name=GIT_BRANCH::${GITHUB_REF#refs/heads/}
          echo ::set-output name=GIT_TAG::${GITHUB_REF#refs/tags/}
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: false
      - name: Run git lfs ls-files
        shell: bash
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id
      - name: Cache git lfs
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
          restore-keys: |
            ${{ runner.os }}-lfs-
      - run: git lfs pull
      - run: bash scripts/echo.sh
        env:
          GITHUB_EXTRA__REFNAME: ${{ steps.git.outputs.GIT_REFNAME }}
          GITHUB_EXTRA__BRANCH: ${{ steps.git.outputs.GIT_BRANCH }}
          GITHUB_EXTRA__TAG: ${{ steps.git.outputs.GIT_TAG }}
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '10.15.3'
      - name: Patch node-gyp on windows
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          npm install --global node-gyp@latest
          npm prefix -g | % {npm config set node_gyp "$_\node_modules\node-gyp\bin\node-gyp.js"}
      - run: yarn install
      - run: yarn build
        env:
          PKG_TARGET: ${{ matrix.pkg-target }}
#           stages:
#   - build
#   - test
#   - name: deploy
#     # Only deploy changes that landed on master, i.e. not PRs too
#     if: (type = push) AND (branch = master)
# jobs:
#   include:
#     - stage: build
#       os: osx
#       language: node_js
#       node_js: 'v10.15.3'
#       script: npm run build
#       after_success: ./scripts/add-asset-to-github.sh ./packages/image-cli/out/node10-mac.tar.gz
#       env: PKG_TARGET=node10-mac
#     - stage: build
#       os: windows
#       language: node_js
#       node_js: 'v10.15.3'
#       script: npm run build
#       after_success: bash ./scripts/add-asset-to-github.sh ./packages/image-cli/out/node10-win.tar.gz
#       env: YARN_GPG=no PKG_TARGET=node10-win
#     - stage: build
#       os: linux
#       dist: trusty
#       language: node_js
#       node_js: 'v10.15.3'
#       script: npm run build
#       after_success: ./scripts/add-asset-to-github.sh ./packages/image-cli/out/node10-linux.tar.gz
#       env: PKG_TARGET=node10-linux
#     - stage: test
#       os: linux
#       dist: trusty
#       language: node_js
#       node_js: 'v10.15.3'
#       # language: rust
#       # rust: beta
#       # env: PKG_TARGET=node10-linux ENABLE_WASM=1 TF_CPP_MIN_LOG_LEVEL=3
#       env: PKG_TARGET=node10-linux TF_CPP_MIN_LOG_LEVEL=3
#       before_install:
#         # - ./scripts/install-node-and-wasm.sh
#         # - nvm use "v10.15.3"
#         - npm install -g yarn
#       before_script:
#         - git lfs pull
#       script:
#         - npm run build
#         - npm run test:lint
#         - npm run test:unit:ci
#         - npm install -g coveralls
#         - cat coverage/lcov.info | coveralls || echo 'Failed to upload to coveralls...'
#     - stage: deploy
#       os: linux
#       dist: trusty
#       language: node_js
#       node_js: 'v10.15.3'
#       env: PKG_TARGET=node10-linux
#       script:
#         - npm install -g @patrickhulce/scripts
#         - npm run build
#       after_success:
#         - ./scripts/publish.sh
#       deploy:
#         provider: pages
#         skip_cleanup: true
#         github_token: $GH_TOKEN
#         local_dir: packages/image/demo
# cache:
#   cargo: true
#   yarn: true
#   directories:
#     - node_modules
#     - .git/lfs
# notifications:
#   email: false
# git:
#   depth: false
#   lfs_skip_smudge: true
# install:
#   - yarn install --check-files
